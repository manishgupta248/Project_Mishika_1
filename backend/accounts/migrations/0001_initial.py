# Generated by Django 5.1.7 on 2025-03-23 10:00

import accounts.models
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'This email is already registered.'}, help_text='Enter a valid email address.', max_length=255, unique=True, validators=[accounts.models.validate_email_domain], verbose_name='Email Address')),
                ('first_name', models.CharField(help_text='Enter your first name.', max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(help_text='Enter your last name.', max_length=50, verbose_name='Last Name')),
                ('mobile_number', models.CharField(blank=True, help_text='Enter a 10-digit Indian mobile number with +91 prefix (e.g., +919876543210).', max_length=13, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid Indian mobile number (e.g., +919876543210).', regex='^\\+91[6-9]\\d{9}$')], verbose_name='Mobile Number')),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.jpg', help_text='Upload a profile picture (max 5MB).', null=True, upload_to=accounts.models.user_profile_pic_path, validators=[accounts.models.validate_image_size], verbose_name='Profile Picture')),
                ('bio', models.TextField(blank=True, help_text='A short bio about yourself (max 500 characters).', max_length=500, null=True, verbose_name='Biography')),
                ('is_email_verified', models.BooleanField(default=False, help_text='Indicates if the email has been verified.', verbose_name='Email Verified')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Timestamp of user creation.', verbose_name='Date Joined')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Timestamp of last user update.', verbose_name='Last Updated')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user account is active.', verbose_name='Active')),
                ('role', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher'), ('admin', 'Admin')], default='student', help_text='User role within the system.', max_length=20, verbose_name='Role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['email'],
                'indexes': [models.Index(fields=['email'], name='email_idx'), models.Index(fields=['first_name', 'last_name'], name='name_idx'), models.Index(fields=['mobile_number'], name='mobile_idx')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('mobile_number__isnull', False)), fields=('mobile_number',), name='unique_mobile_number_if_not_null')],
            },
        ),
    ]
