# academics/model.py

from django.db import models, transaction
from django.contrib.auth import get_user_model
from django.core.validators import RegexValidator
from django.core.exceptions import ValidationError
from django_currentuser.db.models import CurrentUserField
from enum import Enum

User = get_user_model()

class Faculty(Enum):
    """Enum representing faculties a department can belong to."""
    INFORMATION_COMPUTING = "I&C"
    ENGINEERING_TECHNOLOGY = "E&T"
    INTERDISCIPLINARY_RESEARCH = "I&R"
    LIFE_SCIENCES = "LS"
    LIBERAL_ARTS_MEDIA = "LAMS"
    MANAGEMENT_STUDIES = "MS"
    SCIENCES = "SC"
    CCSD = "CCSD"

    @classmethod
    def choices(cls):
        return [(member.value, member.name.replace("_", " ").title()) for member in cls]


class DepartmentManager(models.Manager):
    """Custom manager for Department model with auto-incremented IDs."""
    INITIAL_ID = 1000
    MAX_ID = 9999

    def create_department(self, name: str, faculty: str, **extra_fields) -> 'Department':
        with transaction.atomic():
            last_dept = self.filter(is_deleted=False).order_by('-id').first()
            next_id = self.INITIAL_ID if not last_dept else int(last_dept.id) + 1

            if next_id > self.MAX_ID:
                raise ValueError(f"Department ID cannot exceed {self.MAX_ID}")

            dept_id = f"{next_id:04d}"  # Cleaner string formatting
            return self.create(id=dept_id, name=name, faculty=faculty, **extra_fields)


class Department(models.Model):
    """Academic department model with unique ID, faculty affiliation, and audit fields."""
    
    # Fields
    id = models.CharField(
        max_length=4,
        primary_key=True,
        validators=[RegexValidator(r'^\d{4}$', "ID must be a four-digit number")],
        help_text="Unique four-digit ID (auto-generated)",
        editable=False,
    )
    
    name = models.CharField(
        max_length=50,
        validators=[RegexValidator(r'^[a-zA-Z\s&]+$', "Name must contain only letters, spaces, or '&'")],
        help_text="Department name (e.g., 'Computer Science')",
    )
    
    faculty = models.CharField(
        max_length=4,
        choices=Faculty.choices(),
        help_text="Faculty affiliation",
    )
    
    # Audit Fields
    created_by = CurrentUserField(
        related_name='created_departments',
        editable=False,
        help_text="User who created this department",
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        editable=False,
        help_text="Creation timestamp",
    )
    
    updated_by = CurrentUserField(
        on_update=True,
        related_name='updated_departments',
        editable=False,
        help_text="User who last updated this department",
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        editable=False,
        help_text="Last update timestamp",
    )
    
    is_deleted = models.BooleanField(
        default=False,
        help_text="Soft deletion flag",
    )

    # Manager
    objects = DepartmentManager()

    # Meta
    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=['name', 'faculty'],
                condition=models.Q(is_deleted=False),
                name='unique_active_name_faculty',
            )
        ]
        indexes = [
            models.Index(fields=['faculty']),
            models.Index(fields=['created_at']),
        ]
        ordering = ['id']

    # Methods
    def clean(self) -> None:
        if self.pk and self.id != f"{int(self.id):04d}":
            raise ValidationError("ID must remain a four-digit padded string")
        super().clean()

    def save(self, *args, **kwargs) -> None:
        if not self.pk and not hasattr(self, '_id_set_by_manager'):
            raise ValueError("Use Department.objects.create_department() to create departments")
        self.full_clean()
        super().save(*args, **kwargs)

    def __str__(self) -> str:
        return f"{self.id} - {self.name} ({self.faculty})"

    @property
    def is_active(self) -> bool:
        return not self.is_deleted

    def delete(self, using=None, keep_parents=False, soft: bool = True) -> None:
        if soft:
            self.is_deleted = True
            self.save(using=using)
        else:
            super().delete(using=using, keep_parents=keep_parents)


# Signal
def department_pre_save(sender, instance, **kwargs) -> None:
    if not instance.pk:
        instance._id_set_by_manager = True

models.signals.pre_save.connect(department_pre_save, sender=Department)
================================================================================

# academics/serializers.py

from rest_framework import serializers
from drf_spectacular.utils import extend_schema_field
from .models import Department, Faculty


class FacultyChoiceSerializer(serializers.Serializer):
    """Serializer for Faculty Enum choices, providing value-label pairs for frontend dropdowns."""
    value = serializers.CharField(help_text="Faculty code (e.g., 'I&C')")
    label = serializers.CharField(help_text="Human-readable faculty name (e.g., 'Information Computing')")

    def to_representation(self, instance):
        """Convert Faculty enum tuple to a value-label dictionary."""
        return {'value': instance[0], 'label': instance[1]}


class DepartmentSerializer(serializers.ModelSerializer):
    """Serializer for Department model, supporting CRUD operations with audit fields."""
    created_by = serializers.StringRelatedField(read_only=True)
    updated_by = serializers.StringRelatedField(read_only=True)

    class Meta:
        model = Department
        fields = (
            'id', 'name', 'faculty', 'created_by', 'created_at',
            'updated_by', 'updated_at', 'is_deleted'
        )
        read_only_fields = ('id', 'created_by', 'created_at', 'updated_by', 'updated_at')

    def validate(self, attrs):
        """Validate data before create or update."""
        request = self.context.get('request')
        if not request or not request.user.is_authenticated:
            raise serializers.ValidationError("Authentication is required.")
        return attrs

    def create(self, validated_data):
        """Create a department using the custom manager."""
        try:
            return Department.objects.create_department(
                name=validated_data['name'],
                faculty=validated_data['faculty']
            )
        except ValueError as e:
            raise serializers.ValidationError(str(e))

    def update(self, instance, validated_data):
        """Update department fields, preserving audit trail."""
        instance.name = validated_data.get('name', instance.name)
        instance.faculty = validated_data.get('faculty', instance.faculty)
        instance.save()
        return instance

    @extend_schema_field(serializers.CharField)
    def get_id(self, obj):
        """Document ID as a four-digit string in OpenAPI schema."""
        return obj.id
=================================================================
# academics/views.py

from rest_framework import viewsets, status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from django_filters.rest_framework import DjangoFilterBackend
from drf_spectacular.utils import extend_schema, OpenApiParameter
from .models import Department, Faculty
from .serializers import DepartmentSerializer, FacultyChoiceSerializer


class DepartmentViewSet(viewsets.ModelViewSet):
    """ViewSet for managing Department CRUD operations with filtering and soft deletion."""
    serializer_class = DepartmentSerializer
    filter_backends = (DjangoFilterBackend,)
    filterset_fields = ('faculty', 'is_deleted')
    queryset = Department.objects.all().order_by('id')
    pagination_class = None  # Optional: disable pagination

    def get_permissions(self):
        """Apply permissions: AllowAny for GET, IsAuthenticated for others."""
        if self.action in ('list', 'retrieve'):
            return [AllowAny()]
        return [IsAuthenticated()]

    def get_queryset(self):
        """Filter queryset: staff see all, others see only active departments."""
        user = self.request.user
        if user.is_authenticated and user.is_staff:
            return self.queryset
        return self.queryset.filter(is_deleted=False)

    @extend_schema(
        responses={200: DepartmentSerializer(many=True)},
        parameters=[
            OpenApiParameter(name='faculty', description='Filter by faculty code', type=str),
            OpenApiParameter(name='is_deleted', description='Filter by soft deletion status', type=bool),
        ],
    )
    def list(self, request, *args, **kwargs):
        """List departments with optional filtering by faculty and is_deleted."""
        return super().list(request, *args, **kwargs)

    @extend_schema(
        request=DepartmentSerializer,
        responses={201: DepartmentSerializer},
    )
    def create(self, request, *args, **kwargs):
        """Create a new department (requires authentication)."""
        return super().create(request, *args, **kwargs)

    @extend_schema(
        request=DepartmentSerializer,
        responses={200: DepartmentSerializer},
    )
    def update(self, request, *args, **kwargs):
        """Update an existing department (requires authentication)."""
        return super().update(request, *args, **kwargs)

    def perform_destroy(self, instance):
        """Perform soft deletion instead of hard deletion."""
        instance.delete(soft=True)

    @extend_schema(
        responses={204: None},
        description="Soft-delete a department by setting is_deleted=True",
    )
    def destroy(self, request, *args, **kwargs):
        """Soft-delete a department (requires authentication)."""
        return super().destroy(request, *args, **kwargs)


class FacultyChoicesView(APIView):
    """API endpoint to retrieve Faculty enum choices for frontend dropdowns."""
    permission_classes = (AllowAny,)

    @extend_schema(
        responses={200: FacultyChoiceSerializer(many=True)},
        description="List all faculty choices as value-label pairs.",
    )
    def get(self, request):
        """Return Faculty enum choices."""
        choices = Faculty.choices()
        serializer = FacultyChoiceSerializer(choices, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
======================================================

# academics/urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import DepartmentViewSet, FacultyChoicesView

router = DefaultRouter()
router.register(r'departments', DepartmentViewSet, basename='department')

urlpatterns = [
    path('', include(router.urls)),
    path('faculty-choices/', FacultyChoicesView.as_view(), name='faculty-choices'),
]

"""
API Endpoints:
- GET /academics/departments/ : List departments (public, filtered for non-staff)
- GET /academics/departments/<id>/ : Retrieve a department (public)
- POST /academics/departments/ : Create a department (authenticated)
- PUT /academics/departments/<id>/ : Update a department (authenticated)
- DELETE /academics/departments/<id>/ : Soft-delete a department (authenticated)
- GET /academics/faculty-choices/ : List faculty choices (public)
"""
=====================================================
# university/urls

path('academic/', include(('academics.urls', 'academics'), namespace='academic'), name='academic-root',),
====================================================
