// src/lib/api/authClient.js
/**
 * Axios client for API requests with automatic token refresh and error handling.
 * Configured to use HTTP-only cookies for authentication, aligning with backend JWT setup.
 */

import axios from 'axios';

// Load environment variables
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
const AUTH_REFRESH_PATH = process.env.NEXT_PUBLIC_AUTH_REFRESH_PATH || '/auth/refresh/';
const AUTH_LOGIN_PATH = process.env.NEXT_PUBLIC_AUTH_LOGIN_PATH || '/auth/login/';
const AUTH_LOGOUT_PATH = process.env.NEXT_PUBLIC_AUTH_LOGOUT_PATH || '/auth/logout/';
const REQUEST_TIMEOUT = parseInt(process.env.NEXT_PUBLIC_REQUEST_TIMEOUT, 10) || 10000;

// Centralized Axios instance
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  withCredentials: true, // Include cookies in requests
  timeout: REQUEST_TIMEOUT,
  headers: {
    'Content-Type': 'application/json',
  },
});

// State for managing token refresh queue
let failedQueue = [];
let isRefreshing = false;

/**
 * Process the queue of failed requests after token refresh attempt.
 * @param {Error|null} error - Error if refresh failed, null if successful.
 */
const processQueue = (error) => {
  failedQueue.forEach((prom) => (error ? prom.reject(error) : prom.resolve()));
  failedQueue = [];
};

// Request Interceptor
apiClient.interceptors.request.use(
  (config) => {
    console.debug(`[API Request] ${config.method.toUpperCase()} ${config.url}`);
    if (config.data instanceof FormData) {
      delete config.headers['Content-Type']; // Browser sets multipart boundary
    }
    return config;
  },
  (error) => {
    console.error('[Request Error]', error.message);
    return Promise.reject(error);
  }
);

// Response Interceptor (without hooks)
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    const status = error.response?.status;

    if (
      status === 401 &&
      !originalRequest._retry &&
      ![AUTH_LOGIN_PATH, AUTH_REFRESH_PATH, AUTH_LOGOUT_PATH].includes(originalRequest.url)
    ) {
      originalRequest._retry = true;
      if (!isRefreshing) {
        isRefreshing = true;
        try {
          const response = await apiClient.post(AUTH_REFRESH_PATH, {}, { withCredentials: true });
          console.debug('[Token Refresh] Success:', response.data);
          isRefreshing = false;
          processQueue(null);
          // Ensure the new access token is used in the retry
          return apiClient(originalRequest);
        } catch (refreshError) {
          console.error('[Token Refresh] Failed:', refreshError.message);
          isRefreshing = false;
          processQueue(refreshError);
          window.location.href = '/login';
          return Promise.reject(refreshError);
        }
      }

      // Queue failed requests during refresh
      return new Promise((resolve, reject) => {
        failedQueue.push({
          resolve: () => resolve(apiClient(originalRequest)),
          reject: (err) => reject(err),
        });
      });
    }

    console.error(`[API Error ${status || 'N/A'}]`, error.message);
    return Promise.reject(error);
  }
);

export default apiClient;
===========================================================
// src/lib/api/authService.js
/**
 * Service layer for authentication-related API calls.
 * Wraps apiClient to provide a clean interface for auth operations.
 */

import apiClient from './authClient';

/**
 * Authentication service object.
 */
const authService = {
  /**
   * Perform a POST request to the specified endpoint.
   * @param {string} url - The API endpoint path (relative to base URL).
   * @param {Object|FormData} data - Data to send in the request body.
   * @param {Object} [config] - Optional Axios config (e.g., headers).
   * @returns {Promise<Object>} Response data from the API.
   * @throws {Error} If the request fails.
   */
  async post(url, data, config = {}) {
    try {
      const response = await apiClient.post(url, data, config);
      return response.data;
    } catch (error) {
      console.error(`[AuthService POST ${url}] Error:`, error.message);
      throw error;
    }
  },

  /**
   * Perform a GET request to the specified endpoint.
   * @param {string} url - The API endpoint path (relative to base URL).
   * @returns {Promise<Object>} Response data from the API.
   * @throws {Error} If the request fails.
   */
  async get(url) {
    try {
      const response = await apiClient.get(url);
      return response.data;
    } catch (error) {
      console.error(`[AuthService GET ${url}] Error:`, error.message);
      throw error;
    }
  },
};

export default authService;
============================================================
// src/stores/authStore.js
/**
 * Zustand store for managing authentication state and actions.
 * Handles login, logout, registration, and profile fetching with HTTP-only cookie-based JWT.
 */

import { create } from 'zustand';
import toast from 'react-hot-toast';
import authService from '@/lib/api/authService';

// Load environment variables
const AUTH_LOGIN_PATH = process.env.NEXT_PUBLIC_AUTH_LOGIN_PATH;
const AUTH_LOGOUT_PATH = process.env.NEXT_PUBLIC_AUTH_LOGOUT_PATH;
const AUTH_REGISTER_PATH = process.env.NEXT_PUBLIC_AUTH_REGISTER_PATH;
const AUTH_PROFILE_PATH = process.env.NEXT_PUBLIC_AUTH_PROFILE_PATH;

const useAuthStore = create((set) => ({
  user: null,
  isAuthenticated: false,
  isLoading: false,

  /**
   * Log in a user with email and password.
   * @param {Object} credentials - { email, password }
   * @param {Object} router - Next.js router instance
   */
  login: async (credentials, router) => {
    set({ isLoading: true });
    try {
      const response = await authService.post(AUTH_LOGIN_PATH, credentials);
      set({ user: response.user, isAuthenticated: true, isLoading: false });
      toast.success('Login successful!');
      router.push('/profile');
    } catch (error) {
      console.error('[Login Error]', error.message);
      set({ isLoading: false });
      toast.error(error.response?.data?.error || 'Login failed');
      throw error;
    }
  },

  /**
   * Log out the current user and clear authentication state.
   * @param {Object} router - Next.js router instance
   */
  logout: async (router) => {
    set({ isLoading: true });
    try {
      await authService.post(AUTH_LOGOUT_PATH, {});
      console.debug('[Logout] Success');
      toast.success('Logged out successfully!');
    } catch (error) {
      console.warn('[Logout] Failed:', error.message);
    }
    set({ user: null, isAuthenticated: false, isLoading: false });
    // Clear cookies (optional, if backend doesnâ€™t)
    document.cookie.split(';').forEach((c) => {
      document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');
    });
    router.push('/login');
  },

  /**
   * Register a new user.
   * @param {Object} data - Registration data (e.g., email, password, first_name)
   * @param {Object} router - Next.js router instance
   */
  register: async (data, router) => {
    set({ isLoading: true });
    try {
      const response = await authService.post(AUTH_REGISTER_PATH, data);
      set({ user: response.user, isAuthenticated: true, isLoading: false });
      toast.success('Registration successful!');
      router.push('/profile');
    } catch (error) {
      console.error('[Register Error]', error.message);
      set({ isLoading: false });
      toast.error(error.response?.data?.error || 'Registration failed');
      throw error;
    }
  },

  /**
   * Fetch the current user's profile.
   * @returns {Promise<Object>} User data
   */
  fetchProfile: async () => {
    set({ isLoading: true });
    try {
      const userData = await authService.get(AUTH_PROFILE_PATH);
      set({ user: userData, isAuthenticated: true, isLoading: false });
      return userData;
    } catch (error) {
      console.error('[Fetch Profile Error]', error.message);
      set({ isLoading: false });
      throw error;
    }
  },

  /**
   * Check if the user is authenticated by fetching their profile.
   * @returns {Promise<boolean>} True if authenticated, false otherwise
   */
  checkAuth: async () => {
    set({ isLoading: true });
    try {
      const userData = await authService.get(AUTH_PROFILE_PATH);
      set({ user: userData, isAuthenticated: true, isLoading: false });
      return true;
    } catch (error) {
      console.debug('[Check Auth] Failed:', error.message);
      set({ user: null, isAuthenticated: false, isLoading: false });
      return false;
    }
  },
}));

export default useAuthStore;
=====================================================
// src/components/common/DynamicForm.js
'use client';
/**
 * Reusable dynamic form component with Tailwind styling and react-hook-form.
 * Supports text inputs, textareas, and file uploads with sanitization and accessibility.
 */

import { useEffect, useRef } from 'react';
import { useForm, Controller } from 'react-hook-form';

export function DynamicForm({
  fields,
  onSubmit,
  buttonText,
  errors: externalErrors = {},
  isLoading = false,
  extraContent,
  initialValues = {},
}) {
  // Initialize react-hook-form
  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
    setFocus,
    setError,
  } = useForm({
    defaultValues: fields.reduce((acc, field) => {
      const rawValue = initialValues[field.name] || '';
      const sanitizedValue = String(rawValue).replace(/\s+/g, ' ').trim();
      return { ...acc, [field.name]: sanitizedValue };
    }, {}),
    mode: 'onTouched', // Validate on blur or change after first interaction
  });

  const formRef = useRef(null); // Ref for focus management

  // Sync external errors (e.g., from server) with form state
  useEffect(() => {
    Object.entries(externalErrors).forEach(([name, message]) => {
      setError(name, { type: 'server', message });
    });
  }, [externalErrors, setError]);

  // Focus the first error field after submission fails
  useEffect(() => {
    if (Object.keys(errors).length > 0) {
      const firstErrorField = Object.keys(errors)[0];
      setFocus(firstErrorField);
    }
  }, [errors, setFocus]);

  // Handle form submission
  const onFormSubmit = async (data) => {
    try {
      // Sanitize text fields before submission
      const sanitizedData = Object.entries(data).reduce((acc, [key, value]) => {
        if (typeof value === 'string') {
          acc[key] = value.replace(/\s+/g, ' ').trim();
        } else {
          acc[key] = value; // File inputs remain unchanged
        }
        return acc;
      }, {});
      await onSubmit(sanitizedData);
    } catch (error) {
      console.error(`[DynamicForm] Submission error for ${buttonText}:`, error.message);
    }
  };

  return (
    <div className="max-w-md mx-auto mt-6 p-6 bg-green-100 border border-green-200 rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-6 text-center text-gray-800">{buttonText}</h1>
      <form
        ref={formRef}
        onSubmit={handleSubmit(onFormSubmit)}
        className="space-y-4"
        noValidate // Prevent browser validation to rely on react-hook-form
        aria-label={`${buttonText} form`}
      >
        {fields.map((field) => (
          <div key={field.name}>
            <label
              htmlFor={field.name}
              className="block text-sm font-medium text-gray-700"
            >
              {field.label}
              {field.required && (
                <span className="text-red-500 ml-1" aria-hidden="true">
                  *
                </span>
              )}
            </label>
            <Controller
              name={field.name}
              control={control}
              rules={{
                required: field.required ? `${field.label} is required` : false,
                maxLength: field.maxLength ? { value: field.maxLength, message: `${field.label} exceeds ${field.maxLength} characters` } : undefined,
              }}
              render={({ field: { onChange, onBlur, value, ref } }) => {
                const handleChange = (e) => {
                  const { value: inputValue, files } = e.target;
                  if (files) {
                    onChange(files[0]); // Handle file input
                  } else {
                    const sanitizedValue = inputValue.replace(/\s+/g, ' ').trimStart();
                    onChange(sanitizedValue); // Update form state
                  }
                };

                return field.type === 'textarea' ? (
                  <textarea
                    id={field.name}
                    name={field.name}
                    value={value || ''}
                    onChange={handleChange}
                    onBlur={onBlur}
                    ref={ref}
                    className="mt-1 block w-full p-2 bg-white border border-gray-300 rounded-md focus:ring focus:ring-blue-300 focus:outline-none disabled:bg-gray-100"
                    placeholder={field.placeholder || ''}
                    rows="3"
                    maxLength={field.maxLength || 500}
                    disabled={isLoading || isSubmitting}
                    aria-required={field.required || false}
                    aria-describedby={
                      errors[field.name] || externalErrors[field.name]
                        ? `${field.name}-error`
                        : undefined
                    }
                    aria-invalid={!!(errors[field.name] || externalErrors[field.name])}
                  />
                ) : field.type === 'file' ? (
                  <input
                    type="file"
                    id={field.name}
                    name={field.name}
                    onChange={handleChange}
                    onBlur={onBlur}
                    ref={ref}
                    className="mt-1 block w-full p-2 bg-white border border-gray-300 rounded-md disabled:bg-gray-100"
                    accept={field.accept || ''}
                    disabled={isLoading || isSubmitting}
                    aria-describedby={
                      errors[field.name] || externalErrors[field.name]
                        ? `${field.name}-error`
                        : undefined
                    }
                    aria-invalid={!!(errors[field.name] || externalErrors[field.name])}
                  />
                ) : (
                  <input
                    type={field.type}
                    id={field.name}
                    name={field.name}
                    value={value || ''}
                    onChange={handleChange}
                    onBlur={onBlur}
                    ref={ref}
                    className="mt-1 block w-full p-2 bg-white border border-gray-300 rounded-md focus:ring focus:ring-blue-300 focus:outline-none disabled:bg-gray-100"
                    placeholder={field.placeholder || ''}
                    disabled={isLoading || isSubmitting}
                    aria-required={field.required || false}
                    aria-describedby={
                      errors[field.name] || externalErrors[field.name]
                        ? `${field.name}-error`
                        : undefined
                    }
                    aria-invalid={!!(errors[field.name] || externalErrors[field.name])}
                  />
                );
              }}
            />
            {(errors[field.name] || externalErrors[field.name]) && (
              <p
                id={`${field.name}-error`}
                className="text-red-500 text-sm mt-1"
                role="alert"
              >
                {errors[field.name]?.message || externalErrors[field.name]}
              </p>
            )}
          </div>
        ))}
        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition disabled:bg-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-300"
          disabled={isLoading || isSubmitting}
          aria-busy={isLoading || isSubmitting}
          aria-label={`Submit ${buttonText}`}
        >
          {isLoading || isSubmitting ? 'Submitting...' : buttonText}
        </button>
      </form>
      {extraContent && <div className="mt-4">{extraContent}</div>}
    </div>
  );
}
========================================================
// src/components/common/ErrorBoundary.js
'use client';
import { Component } from 'react';
export default class ErrorBoundary extends Component {
  state = { hasError: false };
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidCatch(error) {
    console.error('[ErrorBoundary] Caught error:', error.message);
  }
  render() {
    if (this.state.hasError) {
      return <div className="p-4 text-red-500">Something went wrong.</div>;
    }
    return this.props.children;
  }
}
=========================================================