# .env.local
# Environment variables for the Next.js frontend.
# Do not commit this file to version control; use .env.example as a template.

# Base Configuration
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_MEDIA_URL=http://localhost:8000/media/

# Authentication Endpoints
# These align with backend university/accounts/urls.py
NEXT_PUBLIC_AUTH_LOGIN_PATH=/auth/login/
NEXT_PUBLIC_AUTH_LOGOUT_PATH=/auth/logout/
NEXT_PUBLIC_AUTH_PROFILE_PATH=/auth/me/
NEXT_PUBLIC_AUTH_REFRESH_PATH=/auth/token/refresh/
NEXT_PUBLIC_AUTH_REGISTER_PATH=/auth/register/

# Academic Endpoints
# Updated to match Django URL: /academic/ prefix from academics.urls
NEXT_PUBLIC_ACADEMIC_DEPARTMENTS_PATH=/academic/departments/
NEXT_PUBLIC_ACADEMIC_FACULTY_CHOICES_PATH=/academic/faculty-choices/

# Course Endpoints (unchanged)
NEXT_PUBLIC_COURSES_COURSES_PATH=/courses/courses/
NEXT_PUBLIC_COURSES_CATEGORY_CHOICES_PATH=/courses/course-category-choices/
NEXT_PUBLIC_COURSES_TYPE_CHOICES_PATH=/courses/course-type-choices/
NEXT_PUBLIC_COURSES_CBCS_CATEGORY_CHOICES_PATH=/courses/cbcs-category-choices/

# Syllabi Endpoint (unchanged)
NEXT_PUBLIC_COURSES_SYLLABI_PATH=/courses/syllabi/

# Frontend-Specific Settings
NEXT_PUBLIC_REQUEST_TIMEOUT=10000  # Timeout for API requests in milliseconds
================================================================
src/lib/api/departmentService.js

/**
 * Service layer for department-related API calls.
 * Wraps apiClient to provide a clean interface for department operations.
 */

import apiClient from './authClient';

// Load environment variables
const DEPARTMENTS_PATH = process.env.NEXT_PUBLIC_ACADEMIC_DEPARTMENTS_PATH;
const FACULTY_CHOICES_PATH = process.env.NEXT_PUBLIC_ACADEMIC_FACULTY_CHOICES_PATH;

/**
 * Department service object.
 */
const departmentService = {
  /**
   * Fetch all departments with optional filtering.
   * @param {Object} [params] - Query parameters (e.g., { faculty: 'SC', is_deleted: false })
   * @returns {Promise<Object>} Response data from the API.
   * @throws {Error} If the request fails.
   */
  async getDepartments(params = {}) {
    try {
      const response = await apiClient.get(DEPARTMENTS_PATH, { params });
      return response.data;
    } catch (error) {
      console.error(`[DepartmentService GET ${DEPARTMENTS_PATH}] Error:`, error.message);
      throw error;
    }
  },

  /**
   * Fetch a single department by ID.
   * @param {string} id - Department ID (e.g., '1000')
   * @returns {Promise<Object>} Response data from the API.
   * @throws {Error} If the request fails.
   */
  async getDepartment(id) {
    try {
      const response = await apiClient.get(`${DEPARTMENTS_PATH}${id}/`);
      return response.data;
    } catch (error) {
      console.error(`[DepartmentService GET ${DEPARTMENTS_PATH}${id}/] Error:`, error.message);
      throw error;
    }
  },

  /**
   * Create a new department.
   * @param {Object} data - Department data (e.g., { name, faculty })
   * @returns {Promise<Object>} Response data from the API.
   * @throws {Error} If the request fails.
   */
  async createDepartment(data) {
    try {
      const response = await apiClient.post(DEPARTMENTS_PATH, data);
      return response.data;
    } catch (error) {
      console.error(`[DepartmentService POST ${DEPARTMENTS_PATH}] Error:`, error.message);
      throw error;
    }
  },

  /**
   * Update an existing department.
   * @param {string} id - Department ID (e.g., '1000')
   * @param {Object} data - Updated department data (e.g., { name, faculty })
   * @returns {Promise<Object>} Response data from the API.
   * @throws {Error} If the request fails.
   */
  async updateDepartment(id, data) {
    try {
      const response = await apiClient.put(`${DEPARTMENTS_PATH}${id}/`, data);
      return response.data;
    } catch (error) {
      console.error(`[DepartmentService PUT ${DEPARTMENTS_PATH}${id}/] Error:`, error.message);
      throw error;
    }
  },

  /**
   * Soft-delete a department.
   * @param {string} id - Department ID (e.g., '1000')
   * @returns {Promise<void>} No content on success.
   * @throws {Error} If the request fails.
   */
  async deleteDepartment(id) {
    try {
      await apiClient.delete(`${DEPARTMENTS_PATH}${id}/`);
    } catch (error) {
      console.error(`[DepartmentService DELETE ${DEPARTMENTS_PATH}${id}/] Error:`, error.message);
      throw error;
    }
  },

  /**
   * Fetch faculty choices for dropdowns.
   * @returns {Promise<Object>} Response data from the API.
   * @throws {Error} If the request fails.
   */
  async getFacultyChoices() {
    try {
      const response = await apiClient.get(FACULTY_CHOICES_PATH);
      return response.data;
    } catch (error) {
      console.error(`[DepartmentService GET ${FACULTY_CHOICES_PATH}] Error:`, error.message);
      throw error;
    }
  },
};

export default departmentService;
======================================================

/**
 * Zustand store for managing department state and actions.
 * Handles CRUD operations and faculty choices with integration to departmentService.
 */

import { create } from 'zustand';
import toast from 'react-hot-toast';
import departmentService from '@/lib/api/departmentService';

const useDepartmentStore = create((set, get) => ({
  departments: [],
  facultyChoices: [],
  isLoading: false,
  error: null,

  /**
   * Fetch all departments with optional filters.
   * @param {Object} [filters] - Query filters (e.g., { faculty: 'SC', is_deleted: false })
   */
  fetchDepartments: async (filters = {}) => {
    set({ isLoading: true, error: null });
    try {
      const departments = await departmentService.getDepartments(filters);
      set({ departments, isLoading: false });
    } catch (error) {
      console.error('[Fetch Departments Error]', error.message);
      set({ isLoading: false, error: error.response?.data?.detail || 'Failed to fetch departments' });
      toast.error('Failed to load departments');
    }
  },

  /**
   * Fetch a single department by ID.
   * @param {string} id - Department ID
   * @returns {Promise<Object>} Department data
   */
  fetchDepartment: async (id) => {
    set({ isLoading: true, error: null });
    try {
      const department = await departmentService.getDepartment(id);
      set({ isLoading: false });
      return department;
    } catch (error) {
      console.error('[Fetch Department Error]', error.message);
      set({ isLoading: false, error: error.response?.data?.detail || 'Failed to fetch department' });
      toast.error('Failed to load department');
      throw error;
    }
  },

  /**
   * Create a new department.
   * @param {Object} data - Department data (e.g., { name, faculty })
   */
  createDepartment: async (data) => {
    set({ isLoading: true, error: null });
    try {
      const newDepartment = await departmentService.createDepartment(data);
      set((state) => ({
        departments: [...state.departments, newDepartment],
        isLoading: false,
      }));
      toast.success('Department created successfully!');
    } catch (error) {
      console.error('[Create Department Error]', error.message);
      set({ isLoading: false, error: error.response?.data?.detail || 'Failed to create department' });
      toast.error(error.response?.data?.detail || 'Failed to create department');
      throw error;
    }
  },

  /**
   * Update an existing department.
   * @param {string} id - Department ID
   * @param {Object} data - Updated department data
   */
  updateDepartment: async (id, data) => {
    set({ isLoading: true, error: null });
    try {
      const updatedDepartment = await departmentService.updateDepartment(id, data);
      set((state) => ({
        departments: state.departments.map((dept) =>
          dept.id === id ? updatedDepartment : dept
        ),
        isLoading: false,
      }));
      toast.success('Department updated successfully!');
    } catch (error) {
      console.error('[Update Department Error]', error.message);
      set({ isLoading: false, error: error.response?.data?.detail || 'Failed to update department' });
      toast.error(error.response?.data?.detail || 'Failed to update department');
      throw error;
    }
  },

  /**
   * Soft-delete a department.
   * @param {string} id - Department ID
   */
  deleteDepartment: async (id) => {
    set({ isLoading: true, error: null });
    try {
      await departmentService.deleteDepartment(id);
      set((state) => ({
        departments: state.departments.map((dept) =>
          dept.id === id ? { ...dept, is_deleted: true } : dept
        ),
        isLoading: false,
      }));
      toast.success('Department deleted successfully!');
    } catch (error) {
      console.error('[Delete Department Error]', error.message);
      set({ isLoading: false, error: error.response?.data?.detail || 'Failed to delete department' });
      toast.error('Failed to delete department');
      throw error;
    }
  },

  /**
   * Fetch faculty choices for dropdowns.
   */
  fetchFacultyChoices: async () => {
    set({ isLoading: true, error: null });
    try {
      const facultyChoices = await departmentService.getFacultyChoices();
      set({ facultyChoices, isLoading: false });
    } catch (error) {
      console.error('[Fetch Faculty Choices Error]', error.message);
      set({ isLoading: false, error: error.response?.data?.detail || 'Failed to fetch faculty choices' });
      toast.error('Failed to load faculty choices');
    }
  },
}));

export default useDepartmentStore;

=========================================================
'use client';

/**
 * Reusable dynamic form component with Tailwind styling and react-hook-form.
 * Supports text inputs, textareas, file uploads, and select dropdowns with sanitization and accessibility.
 */

import { useEffect, useRef } from 'react';
import { useForm, Controller } from 'react-hook-form';

export function DynamicForm({
  fields, // Array of field configurations (e.g., { name, label, type, required, options })
  onSubmit, // Callback function to handle form submission
  buttonText, // Text to display on the submit button
  errors: externalErrors = {}, // External errors (e.g., from server) to display
  isLoading = false, // Loading state to disable form during submission
  extraContent, // Additional content to render below the form
  initialValues = {}, // Initial values to pre-populate the form
}) {
  // Initialize react-hook-form with default values and validation mode
  const {
    control, // Controller for managing form inputs
    handleSubmit, // Function to handle form submission
    formState: { errors, isSubmitting }, // Form state including validation errors and submission status
    setFocus, // Function to focus a specific field
    setError, // Function to manually set errors
  } = useForm({
    defaultValues: fields.reduce((acc, field) => {
      const rawValue = initialValues[field.name] || ''; // Get initial value or empty string
      const sanitizedValue = String(rawValue).replace(/\s+/g, ' ').trim(); // Sanitize initial value
      return { ...acc, [field.name]: sanitizedValue };
    }, {}),
    mode: 'onTouched', // Validate on blur or change after first interaction
  });

  const formRef = useRef(null); // Ref for form element to manage focus

  // Sync external errors (e.g., from server) with form state
  useEffect(() => {
    Object.entries(externalErrors).forEach(([name, message]) => {
      setError(name, { type: 'server', message }); // Set server-side errors
    });
  }, [externalErrors, setError]);

  // Focus the first field with an error after submission fails
  useEffect(() => {
    if (Object.keys(errors).length > 0) {
      const firstErrorField = Object.keys(errors)[0];
      setFocus(firstErrorField); // Focus on the first errored field
    }
  }, [errors, setFocus]);

  // Handle form submission with sanitized data
  const onFormSubmit = async (data) => {
    try {
      // Sanitize text fields before submission
      const sanitizedData = Object.entries(data).reduce((acc, [key, value]) => {
        if (typeof value === 'string') {
          acc[key] = value.replace(/\s+/g, ' ').trim(); // Remove extra spaces
        } else {
          acc[key] = value; // Keep non-string values (e.g., files) unchanged
        }
        return acc;
      }, {});
      await onSubmit(sanitizedData); // Call the provided submission handler
    } catch (error) {
      console.error(`[DynamicForm] Submission error for ${buttonText}:`, error.message);
    }
  };

  return (
    <div className="max-w-md mx-auto mt-6 p-6 bg-green-100 border border-green-200 rounded-lg shadow-md">
      {/* Form title */}
      <h1 className="text-2xl font-bold mb-6 text-center text-gray-800">{buttonText}</h1>

      {/* Form element with submission handler */}
      <form
        ref={formRef}
        onSubmit={handleSubmit(onFormSubmit)}
        className="space-y-4"
        noValidate // Disable browser validation to rely on react-hook-form
        aria-label={`${buttonText} form`}
      >
        {fields.map((field) => (
          <div key={field.name}>
            {/* Field label with required indicator */}
            <label
              htmlFor={field.name}
              className="block text-sm font-medium text-gray-700"
            >
              {field.label}
              {field.required && (
                <span className="text-red-500 ml-1" aria-hidden="true">
                  *
                </span>
              )}
            </label>

            {/* Controller for managing form field state */}
            <Controller
              name={field.name}
              control={control}
              rules={{
                required: field.required ? `${field.label} is required` : false, // Required validation
                maxLength: field.maxLength
                  ? { value: field.maxLength, message: `${field.label} exceeds ${field.maxLength} characters` }
                  : undefined, // Max length validation
              }}
              render={({ field: { onChange, onBlur, value, ref } }) => {
                // Handle input change with sanitization
                const handleChange = (e) => {
                  const { value: inputValue, files } = e.target;
                  if (files) {
                    onChange(files[0]); // Handle file input
                  } else {
                    const sanitizedValue = inputValue.replace(/\s+/g, ' ').trimStart(); // Sanitize text input
                    onChange(sanitizedValue);
                  }
                };

                // Render different input types based on field.type
                if (field.type === 'textarea') {
                  return (
                    <textarea
                      id={field.name}
                      name={field.name}
                      value={value || ''} // Controlled value
                      onChange={handleChange}
                      onBlur={onBlur} // Trigger validation on blur
                      ref={ref} // Reference for focus management
                      className="mt-1 block w-full p-2 bg-white border border-gray-300 rounded-md focus:ring focus:ring-blue-300 focus:outline-none disabled:bg-gray-100"
                      placeholder={field.placeholder || ''} // Placeholder text
                      rows="3" // Default rows for textarea
                      maxLength={field.maxLength || 500} // Max length limit
                      disabled={isLoading || isSubmitting} // Disable during loading/submission
                      aria-required={field.required || false} // Accessibility attribute
                      aria-describedby={
                        errors[field.name] || externalErrors[field.name]
                          ? `${field.name}-error`
                          : undefined
                      } // Link to error message
                      aria-invalid={!!(errors[field.name] || externalErrors[field.name])} // Indicate invalid state
                    />
                  );
                } else if (field.type === 'file') {
                  return (
                    <input
                      type="file"
                      id={field.name}
                      name={field.name}
                      onChange={handleChange}
                      onBlur={onBlur}
                      ref={ref}
                      className="mt-1 block w-full p-2 bg-white border border-gray-300 rounded-md disabled:bg-gray-100"
                      accept={field.accept || ''} // File type restriction
                      disabled={isLoading || isSubmitting}
                      aria-describedby={
                        errors[field.name] || externalErrors[field.name]
                          ? `${field.name}-error`
                          : undefined
                      }
                      aria-invalid={!!(errors[field.name] || externalErrors[field.name])}
                    />
                  );
                } else if (field.type === 'select') {
                  return (
                    <select
                      id={field.name}
                      name={field.name}
                      value={value || ''} // Controlled value
                      onChange={handleChange}
                      onBlur={onBlur}
                      ref={ref}
                      className="mt-1 block w-full p-2 bg-white border border-gray-300 rounded-md focus:ring focus:ring-blue-300 focus:outline-none disabled:bg-gray-100"
                      disabled={isLoading || isSubmitting}
                      aria-required={field.required || false}
                      aria-describedby={
                        errors[field.name] || externalErrors[field.name]
                          ? `${field.name}-error`
                          : undefined
                      }
                      aria-invalid={!!(errors[field.name] || externalErrors[field.name])}
                    >
                      {/* Default placeholder option */}
                      <option value="" disabled>
                        {field.placeholder || 'Select an option'}
                      </option>
                      {/* Map options for dropdown */}
                      {field.options && field.options.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  );
                } else {
                  return (
                    <input
                      type={field.type || 'text'} // Default to text if type not specified
                      id={field.name}
                      name={field.name}
                      value={value || ''}
                      onChange={handleChange}
                      onBlur={onBlur}
                      ref={ref}
                      className="mt-1 block w-full p-2 bg-white border border-gray-300 rounded-md focus:ring focus:ring-blue-300 focus:outline-none disabled:bg-gray-100"
                      placeholder={field.placeholder || ''}
                      disabled={isLoading || isSubmitting}
                      aria-required={field.required || false}
                      aria-describedby={
                        errors[field.name] || externalErrors[field.name]
                          ? `${field.name}-error`
                          : undefined
                      }
                      aria-invalid={!!(errors[field.name] || externalErrors[field.name])}
                    />
                  );
                }
              }}
            />

            {/* Display validation or server errors */}
            {(errors[field.name] || externalErrors[field.name]) && (
              <p
                id={`${field.name}-error`}
                className="text-red-500 text-sm mt-1"
                role="alert"
              >
                {errors[field.name]?.message || externalErrors[field.name]}
              </p>
            )}
          </div>
        ))}

        {/* Submit button */}
        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition disabled:bg-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-300"
          disabled={isLoading || isSubmitting}
          aria-busy={isLoading || isSubmitting}
          aria-label={`Submit ${buttonText}`}
        >
          {isLoading || isSubmitting ? 'Submitting...' : buttonText}
        </button>
      </form>

      {/* Optional extra content below the form */}
      {extraContent && <div className="mt-4">{extraContent}</div>}
    </div>
  );
}
=========================================================
'use client';

import { useState, useMemo, useRef, useEffect } from 'react';

/**
 * A reusable table component with sorting, searching, action buttons, and resizable columns.
 * @param {Object} props
 * @param {Array<Object>} props.data - The data to display in the table.
 * @param {Array<{key: string, label: string, sortable?: boolean, render?: (item: Object) => React.ReactNode, width?: string}>} props.columns - Column configurations with optional initial width.
 * @param {boolean} [props.loading] - Whether the table is in a loading state.
 * @param {(item: Object) => void} [props.onEdit] - Callback for editing an item.
 * @param {(item: Object) => void} [props.onDelete] - Callback for deleting an item.
 */
export default function GenericTable({
  data = [],
  columns,
  loading = false,
  onEdit,
  onDelete,
}) {
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const [searchTerm, setSearchTerm] = useState('');
  const [columnWidths, setColumnWidths] = useState(() =>
    columns.reduce((acc, col) => ({
      ...acc,
      [col.key]: col.width || 'auto', // Default to 'auto' if no width specified
    }), {})
  );
  const tableRef = useRef(null); // Ref for the table element
  const resizingColumn = useRef(null); // Track the column being resized
  const startX = useRef(0); // Starting X position for resize

  // Handle column sorting
  const handleSort = (key) => {
    if (!columns.find((col) => col.key === key)?.sortable) return;
    setSortConfig((prev) => ({
      key,
      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',
    }));
  };

  // Handle column resize start
  const handleResizeStart = (e, columnKey) => {
    resizingColumn.current = columnKey;
    startX.current = e.clientX;
    document.addEventListener('mousemove', handleResizeMove);
    document.addEventListener('mouseup', handleResizeEnd);
  };

  // Handle column resize movement
  const handleResizeMove = (e) => {
    if (!resizingColumn.current) return;
    const th = tableRef.current.querySelector(`th[data-key="${resizingColumn.current}"]`);
    const currentWidth = th.getBoundingClientRect().width;
    const delta = e.clientX - startX.current;
    const newWidth = Math.max(50, currentWidth + delta); // Minimum width of 50px
    setColumnWidths((prev) => ({
      ...prev,
      [resizingColumn.current]: `${newWidth}px`,
    }));
    startX.current = e.clientX; // Update startX for smooth dragging
  };

  // Handle column resize end
  const handleResizeEnd = () => {
    resizingColumn.current = null;
    document.removeEventListener('mousemove', handleResizeMove);
    document.removeEventListener('mouseup', handleResizeEnd);
  };

  // Memoize filtered and sorted data for performance
  const filteredAndSortedData = useMemo(() => {
    let result = [...(Array.isArray(data) ? data : [])];

    // Apply search filter
    if (searchTerm) {
      const lowerSearch = searchTerm.toLowerCase();
      result = result.filter((item) =>
        columns.some((col) =>
          String(item[col.key] ?? '').toLowerCase().includes(lowerSearch)
        )
      );
    }

    // Apply sorting
    if (sortConfig.key) {
      result.sort((a, b) => {
        const aValue = a[sortConfig.key] ?? '';
        const bValue = b[sortConfig.key] ?? '';
        const compare = String(aValue).localeCompare(String(bValue));
        return sortConfig.direction === 'asc' ? compare : -compare;
      });
    }

    return result;
  }, [data, columns, searchTerm, sortConfig]);

  // Clean up event listeners on unmount
  useEffect(() => {
    return () => {
      document.removeEventListener('mousemove', handleResizeMove);
      document.removeEventListener('mouseup', handleResizeEnd);
    };
  }, []);

  return (
    <div className="bg-blue-50 border border-blue-200 p-6 rounded-lg shadow-md">
      {loading && !data.length ? (
        <p className="text-gray-500 text-center">Loading...</p>
      ) : filteredAndSortedData.length === 0 ? (
        <p className="text-gray-500 text-center">No items found.</p>
      ) : (
        <>
          <div className="mb-4">
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search..."
              disabled={loading}
              className="w-full p-2 border border-green-400 rounded-md bg-white shadow-sm focus:ring-2 focus:ring-blue-300 focus:border-green-600 disabled:bg-gray-200 disabled:cursor-not-allowed transition-all duration-200"
              aria-label="Search table data"
            />
          </div>
          <div className="overflow-x-auto">
            <table
              ref={tableRef}
              className="min-w-full border-collapse border border-green-400"
            >
              <thead>
                <tr className="bg-[#800000] text-white">
                  {columns.map((col) => (
                    <th
                      key={col.key}
                      data-key={col.key} // For referencing in resize
                      onClick={() => col.sortable && handleSort(col.key)}
                      className={`border border-green-400 p-3 text-center text-sm font-semibold relative ${
                        col.sortable
                          ? 'cursor-pointer hover:bg-[#600000] transition-colors'
                          : ''
                      }`}
                      style={{ width: columnWidths[col.key] }} // Apply dynamic width
                      aria-sort={
                        col.sortable && sortConfig.key === col.key
                          ? sortConfig.direction
                          : 'none'
                      }
                    >
                      {col.label}
                      {col.sortable && sortConfig.key === col.key && (
                        <span aria-hidden="true">
                          {sortConfig.direction === 'asc' ? ' ↑' : ' ↓'}
                        </span>
                      )}
                      {/* Resize handle */}
                      <span
                        onMouseDown={(e) => handleResizeStart(e, col.key)}
                        className="absolute right-0 top-0 h-full w-2 cursor-col-resize bg-gray-300 opacity-0 hover:opacity-100 transition-opacity"
                        aria-label={`Resize ${col.label} column`}
                      />
                    </th>
                  ))}
                  <th
                    className="border border-green-400 p-3 text-center text-sm font-semibold"
                    style={{ width: columnWidths['actions'] || 'auto' }}
                  >
                    Actions
                    <span
                      onMouseDown={(e) => handleResizeStart(e, 'actions')}
                      className="absolute right-0 top-0 h-full w-2 cursor-col-resize bg-gray-300 opacity-0 hover:opacity-100 transition-opacity"
                      aria-label="Resize Actions column"
                    />
                  </th>
                </tr>
              </thead>
              <tbody>
                {filteredAndSortedData.map((item) => (
                  <tr
                    key={item.id || JSON.stringify(item)}
                    className="hover:bg-gray-50 transition-colors duration-150"
                  >
                    {columns.map((col) => (
                      <td
                        key={col.key}
                        className="border border-green-400 p-3 text-center"
                        style={{ width: columnWidths[col.key] }} // Apply dynamic width
                      >
                        {col.render ? col.render(item) : item[col.key] ?? '-'}
                      </td>
                    ))}
                    <td
                      className="border border-green-400 p-2 text-center"
                      style={{ width: columnWidths['actions'] || 'auto' }}
                    >
                      <button
                        onClick={() => onEdit?.(item)}
                        disabled={loading || !onEdit}
                        className="text-blue-600 hover:text-blue-800 disabled:text-gray-400 mr-4 px-1 transition-colors"
                        aria-label={`Edit ${item.name || 'item'}`}
                      >
                        Edit
                      </button>
                      <span className="text-gray-400">|</span>
                      <button
                        onClick={() => onDelete?.(item)}
                        disabled={loading || !onDelete}
                        className="text-red-600 hover:text-red-800 disabled:text-gray-400 px-2 transition-colors"
                        aria-label={`Delete ${item.name || 'item'}`}
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </>
      )}
    </div>
  );
}